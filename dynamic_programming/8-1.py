# 다이나믹 프로그래밍
 # 한번 계산한 문제는 다시 계산하지 않도록 하는 알고리즘

'''
* 다이나믹 프로그래밍 (동적 계획법)
1. top-down : 큰 문제를 위해 작은 문제를 호출 (재귀 함수 이용)
2. bottom-up : 작은 문제부터 차근차근 답을 도출 (반복문 이용)
3. 메모이제이션 기법

ex)피보나치 수열
이전 두 항의 합을 현재항으로 설정하는 특징으로, 끝없이 이어진다.
프로그래밍에서는 이러한 수열을 배열이나 리스트로 표현 가능
'''

# 8-1.py 피보나치 함수 소스코드
 # 피보나치 함수(Fibonacci Function)를 재귀 함수로 구현
def fibo(x):
    if x==1 or x==2:
        return 1
    return fibo(x-1) + fibo(x-2)

# print(fibo(4))

'''
하지만, 피보나치 수열을 이처럼 재귀 함수를 사용하면, n값이 커질수록 수행 시간이 기하급수적으로 증가함
시간 복잡도 : O(2^N)
 => 다이나믹 프로그래밍을 사용해보자!
'''

# 8-2.py 피보나치 수열 소스코드(재귀적)
 # 한 번 계산된 결과를 메모이제이션(Memoization)하기 위한 리스트 초기화
d = [0] * 100

 # 피보나치 함수를 재귀함수로 구현 (탑다운 다이나믹 프로그래밍)
def fibo2(x):
    # 종료 조건 (1 또는 2일 때 1 반환)
    if x==1 or x==2 :
        return 1
    # 이미 계산한 적 있는 문제라면 그대로 반환
    if d[x] != 0:
        return d[x]
    # 아직 계산하지 않은 문제라면 점화식에 따라서 피보나치 결과 반환
    d[x] = fibo2(x-1) + fibo2(x-2)
    return d[x]

# print(fibo2(99))


'''
다시 말해, 다이나믹 프로그래밍이란?
큰 문제를 작게 나누고, 같은 문제라면 한 번만 풀자
위의 예시는 재귀 함수를 사용했지만, 보통, 다이나믹 프로그래밍에서는 반복문을 가장 많이 사용(성능이 더 좋음)
'''

# 8-3.py 호출되는 함수 확인
d = [0] * 100

def fibo_count(x):
    print('f('+ str(x) + ')' , end = ' ')
    if x==1 or x==2:
        return 1
    if d[x] !=0 :
        return d[x]
    
    d[x] = fibo_count(x-1) + fibo_count(x-2)
    return d[x]

# fibo_count(12)


# 8-4.py 피보나치 수열 소스코드(반복적)
d = [0] * 100   # DP(dynamic programming) 테이블 초기화

 # 첫 번째 피보나치 수와 두 번째 피보나치 수는 1
d[1] = 1
d[2] = 1
n = 99

 # 피보나치 함수 반복문으로 구현 (바텀업 다이나믹 프료그래밍)
for i in range(3, n+1):
    d[i] = d[i-1] + d[i-2]

# print(d[n])

