# p.226 효율적인 화폐 구성
'''
n가지 종류의 화폐가 있다. 이 화폐들의 개수를 최소한으로 이용해서 그 가치의 합이 m원이 되도록 한다.
이때 각 화폐는 몇 개라도 사용할 수 있으며, 사용한 화폐의 구성은 같지만 순서만 다른 것은 같은 경우로 구분한다.
예를 들어, 2원과 3원이 있을 때, 15원을 만들기 위해 3원을 5개만 사용하는 것이 가장 최소한의 화폐의 개수이다.

입력 조건
n m
n1
n2
n3 ..

출력 조건
불가능하면 -1 출력
'''

# 8-8.py 답안 예시
 # 정수 n,m 입력
n,m = map(int, input().split())
 # n개의 화폐 단위 입력
array = []
for i in range(n):
    array.append(int(input()))

 # DP 테이블 초기화
d = [10001] * (m+1)   # m의 최댓값이 10000이라고 조건을 걸었으므로, 10001은 특정 금액을 만들 수 없다는 의미를 가진다.

 # 다이나믹 프로그래밍(바텀업)
d[0] = 0
for i in range(n):
    for j in range(array[i], m+1):
        if d[j - array[i]] != 10001:  # (i-k)원을 만드는 방법이 존재하는 경우
            d[j] = min(d[j], d[j-array[i]]+ 1)
        print(d[j])

 # 결과 출력
if d[m] == 10001:
    print(-1)
else:
    print(d[m])

