# p.201 떡볶이 떡 만들기
'''
일정하지 않은 떡의 길이를 절단기로 잘라서 맞춰준다.
예를 들어, 19 14 10 17의 길이의 떡을 15로 지정하여 자르면, 15 14 10 15가 되며, 잘린 떡은 4 0 0 2이므로 손님은 총 6을 가져간다.
손님이 왔을 때, 요청한 총 길이가 m일때, 적어도 m만큼의 떡을 얻기 위해 절단기에 설정할 수 있는 높이의 최댓값을 구하는 프로그램을 작성하자.
'''

# 전형적인 이진 탐색 문제, 파라메트릭 서치 문제 (parametric search)
# ㄴ> 최적화 문제를 결정 문제로 바꾸어 해결하는 기법
# ㄴ> 예를 들어, 범위 내에서 조건을 만족하는 가장 큰 값을 찾으라는 최적화 문제라면, 이진 탐색으로 결정 문제를 해결해가면서 범위를 좁혀갈 수 있다.
# 보통, 파라메트릭 서치 문제는 이진 탐색을 이용한다.
'''
# 방법
1. 당연히 절단기 h의 높이는 가장 긴 떡의 길이 사이값이어야 한다.
 여기서는 19가 가장 길기 때문에, 0~ 19까지의 범위를 고려해 시작점 0, 끝점 19로 설정
2. 0과 19의 중간점 9를 절단기 높이 h로 설정하면, 얻을 수 있는 떡의 길이 합은 10+6+1+8 = 25이다. 6보다 크기 때문에 시작점 증가시킨다.
3. 시작점을 10으로 옮기고, 중간점은 14로 설정된다. 얻을 수 있는 떡의 길이 합은 5+1+3 = 9이다. 여전히 6보다 크기때문에 시작점 증가시킨다.
4. 시작점 15, 끝점 19, 중간점 17 ==> 합 = 2이므로 이번에는 끝점 감소
5. 시작점 15, 끝점 16, 중간점 15 ==> 합 = 6 , 타겟 = MID 이므로 탐색 완료
'''

# 7-8.py 답안 예시
n,m = list(map(int, input().split()))
array = list(map(int, input().split()))

 # 시작점, 끝점
start = 0
end = max(array)

 # 이진 탐색 수행(반복적)
result = 0
while(start <= end):
    total = 0
    mid = (start + end) // 2
    for x in array:
        # 잘랐을 때 떡의 길이 계산
        if x > mid:
            total += x - mid
    # 떡의 양이 부족한 경우 더 많이 자르기(왼쪽 부분 탐색)
    if total < m:
        end = mid -1
    # 떡의 양이 충분한 경우 덜 자르기(오른쪽 부분 탐색)
    else:
        result = mid # 최대한 덜 잘랐을 때가 정답이므로, 여기에서 result에 기록
        start = mid + 1

print(result)
